//Check if a given binary tree is balanced. A balanced binary tree is one in which the depths of every nodeâ€™s left and right subtree differ by at most 1.
//
//Examples
//
//        5
//
//      /    \
//
//    3        8
//
//  /   \        \
//
//1      4        11
//
//is balanced binary tree,
//
//        5
//
//      /
//
//    3
//
//  /   \
//
//1      4
//
//is not balanced binary tree.
//
//Corner Cases
//
//What if the binary tree is null? Return true in this case.
//How is the binary tree represented?
//
//We use the level order traversal sequence with a special symbol "#" denoting the null node.
//
//For Example:
//
//The sequence [1, 2, 3, #, #, 4] represents the following binary tree:
//
//    1
//
//  /   \
//
// 2     3
//
//      /
//
//    4
//

package round4;

public class CheckIfTreeBalanced {
	public boolean isBalanced(TreeNode root) {
		if (root ==null) {
			return true;
		}
		int height=getHeight(root);
	}

	private int getHeight(TreeNode root) {
		// TODO Auto-generated method stub
		if (root == null) {
			return 0;
		}
		return 1+max(getHeight(root.left),getHeight(root.right));
	}

}
