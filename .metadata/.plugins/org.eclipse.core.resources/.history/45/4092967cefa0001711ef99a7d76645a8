//Reorder the given singly-linked list N1 -> N2 -> N3 -> N4 -> … -> Nn -> null to be N1- > Nn -> N2 -> Nn-1 -> N3 -> Nn-2 -> … -> null
//
//Examples
//
//L = null, is reordered to null
//L = 1 -> null, is reordered to 1 -> null
//L = 1 -> 2 -> 3 -> 4 -> null, is reordered to 1 -> 4 -> 2 -> 3 -> null
//L = 1 -> 2 -> 3 -> null, is reordred to 1 -> 3 -> 2 -> null

package round3;

public class ReOrderLinkedList {
	public ListNode reOrderLinkedList(ListNode head){
		ListNode mid = middleNode(head);
		ListNode one = head;
		ListNode two = mid.next;
		mid.next=null;
		return (merge(one,reverse(two)));
	}
	private ListNode reverse(ListNode head) {
		ListNode pre = null;
		while (head!=null) {
			ListNode next=head.next;
			head.next=pre;
			pre = head;
			head=next;
		}
		return  pre;
	}

	private ListNode merge(ListNode one, ListNode two) {
		if (one ==null) {
			return two;
		}
		if (two == null) {
			return one;
		}
		if (one.value<two.value) {
			one.next = merge(one.next,two);
			return one;
		}else {
			two.next=merge(one,two.next);
			return two;
		}
	}
	private ListNode middleNode(ListNode head) {
		ListNode slow = head;
		ListNode fast = head;
		if (head == null || head.next== null) {
			return head;
		}
		while (fast.next!=null && fast.next.next !=null) {
			slow=slow.next;
			fast=fast.next.next;
		}
		return slow;
	}
}
