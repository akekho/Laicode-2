package round5;

import java.util.Comparator;
import java.util.PriorityQueue;

public class KSmallestInSortedMatrix {
	public int kSmallest (int[][] matrix, int k) {
		int rows = matrix.length;
		int columns = matrix[0].length;
		PriorityQueue<Cell> minHeap = new PriorityQueue<Cell>(k,new Comparator<Cell>() {

			@Override
			public int compare(Cell o1, Cell o2) {
				if (o1.value == o2.value){
					return 0;
				}
				return o1.value<o2.value? -1:1;// minHeap
			}
		});
		// create to watch if the matrix that have been visited
		// set true if visited
		boolean[][] visited = new boolean [rows][columns];
		minHeap.offer(new Cell(0,0,matrix[0][0]));
		visited[0][0]=true;
		for (int i = 0; i<k-1;i++) {
			Cell cur = minHeap.poll();
			if(cur.row+1<rows &&!visited[cur.row+1][cur.column]){
				minHeap.offer(new Cell (cur.row+1,cur.column,matrix[cur.row+1][cur.column]));
				visited[cur.row+1][cur.column]=true;
			}
		}
		return minHeap.peek().value;
	}
	static class Cell {
		int row;
		int column;
		int value;	
		Cell (int row, int column, int value){
			this.row=row;
			this.column=column;
			this.value=value;
		}
	}
}
