package round5;
import java.util.Comparator;
import java.util.PriorityQueue;

//Find the K smallest numbers in an unsorted integer array A. The returned numbers should be in ascending order.
//
//Assumptions
//
//A is not null
//K is >= 0 and smaller than or equal to size of A
//Return
//
//an array with size K containing the K smallest numbers in ascending order
//Examples
//
//A = {3, 4, 1, 2, 5}, K = 3, the 3 smallest numbers are {1, 2, 3}
//package round5;
//minHeap
//public class KSmallestInUnsortedArray {

public class KSmallestInUnsortedArray {
	public int[] maxHeapkSmallest(int[] array, int k) {
		if (array==null || array.length<= k) {
			return array;
		}
		int[] result= new int[k];
		if (k==0) {
			return result;
		}
		PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(k,new Comparator<Integer>() {

			@Override
			public int compare(Integer o1, Integer o2) {
				if (o1.equals(o2)) {
					return 0;
				}
				return o1>o2?-1:1;
			}
		});
		for (int i=0; i<array.length;i++) {
			if (i<k) {
				maxHeap.offer(array[i]);
			}else if (maxHeap.peek()>array[i]) {
				maxHeap.poll();
				maxHeap.offer(array[i]);
			}
		}
		for (int i=k-1;i>=0;i--) {
			result[i]=maxHeap.poll();
		}
		return result;
	}
	public int[] minHeapkSmallest(int[] array, int k) {
		if (array==null || array.length<= k) {
			return array;
		}
		int[] result= new int[k];
		if (k==0) {
			return result;
		}
		PriorityQueue<Integer> minHeap = new PriorityQueue<>();
		for (int i=0; i<array.length-1;i++) {
				minHeap.offer(array[i]);		
		}
		for (int i=0;i<k;i++) {
			result[i]=minHeap.poll();
		}
		return result;	
	}
	//O(n+k)log(k) â¬†
}




