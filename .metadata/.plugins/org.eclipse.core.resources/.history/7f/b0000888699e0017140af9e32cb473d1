//Java: Implement a queue by using two stacks. The queue should provide size(), isEmpty(), offer(), poll() 
//and peek() operations. When the queue is empty, poll() and peek() should return null.
//
//C++: Implement a queue by using two stacks. The queue should provide size(), isEmpty(), push(), front() and pop() operations. When the queue is empty, front() should return -1.
//
//Assumptions
//
//The elements in the queue are all Integers.
//size() should return the number of elements buffered in the queue.
//isEmpty() should return true if there is no element buffered in the queue, false otherwise.
package round3;

import java.util.ArrayDeque;
import java.util.Deque;

public class QueueByTwoStack {
	Deque<Integer> in;
	Deque<Integer> out;
	public QueueByTwoStack() {
		in = new ArrayDeque<Integer>();
		out = new ArrayDeque<Integer>();
	}
	private void move() {
		if(out.isEmpty()) {
			while (!in.isEmpty()) {
				out.push(in.pop());
			}
		}
	}
	public Integer poll() {
		move();
		return out.isEmpty() ? null:out.pop();
	}
	public void offer(int element) {
		in.push(element);
	}
	public Integer peek( ) {
		move();
		return out.isEmpty()?null:out.peek();
	}
	public int size(){
	 	return in.size()+out.size();
	}
	public boolean isEmpty() {
		return in.size()==0 && out.size()==0;
	}
	
}
