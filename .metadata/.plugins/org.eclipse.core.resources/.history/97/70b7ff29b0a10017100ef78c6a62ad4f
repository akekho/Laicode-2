//Implement an iterative, post-order traversal of a given binary tree, return the list of keys of each node in the tree as it is post-order traversed.
//
//Examples
//
//        5
//
//      /    \
//
//    3        8
//
//  /   \        \
//
//1      4        11
//
//Post-order traversal is [1, 4, 3, 11, 8, 5]
//
//Corner Cases
//
//What if the given binary tree is null? Return an empty list in this case.
//How is the binary tree represented?
//
//We use the level order traversal sequence with a special symbol "#" denoting the null node.
//
//For Example:
//
//The sequence [1, 2, 3, #, #, 4] represents the following binary tree:
//
//    1
//
//  /   \
//
// 2     3
//
//      /
//
//    4
//

package round4;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.List;

public class PostOrderBinaryTree {
	 public List<Integer> postOrder(TreeNode root) {
		 	List<Integer> result = new ArrayList<Integer>();
		 	Deque<TreeNode> stack = new ArrayDeque<>();
		 	if (root == null) {
		 		return result;
		 	}
		 	TreeNode cur = root;
		 	while(cur!=null || !stack.isEmpty()) {
		 		if(cur!=null) {
		 			stack.offerFirst(cur);
		 			cur=cur.left;
		 		}else {
		 			cur=stack.pollFirst();
		 			result.add(cur.key);
		 			if(cur.right!=null) {
		 				result.add(cur.right.key);
		 			}
		 			cur=cur.right;
		 		}
		 	}
		 	return result;
	 }

}
