//Get the list of keys in a given binary search tree in a given range[min, max] in ascending order, both min and max are inclusive.

//Examples
//
//        5
//
//      /    \
//
//    3        8
//
//  /   \        \
//
// 1     4        11
//
//get the keys in [2, 5] in ascending order, result is  [3, 4, 5]
//
//Corner Cases
//
//What if there are no keys in the given range? Return an empty list in this case.
//How is the binary tree represented?
//
//We use the level order traversal sequence with a special symbol "#" denoting the null node.
//
//For Example:
//
//The sequence [1, 2, 3, #, #, 4] represents the following binary tree:
//
//    1
//
//  /   \
//
// 2     3
//
//      /
//
//    4


package round4;

import java.util.ArrayList;
import java.util.List;

public class GetKeyInGivenRange {
	public List<Integer> getRange(TreeNode root, int min, int max) {
		List<Integer> result = new ArrayList<>();
		getResult(root,result,min,max);
		return result;
	}

	private void getResult(TreeNode root, List<Integer> result, int min, int max) {
		// TODO Auto-generated method stub
		if (root==null) {
			return;
		}

		if(root.key>=min&&root.key<=max){
			result.add(root.key);
		}
		if (root.key > min) {
			getResult(root.left,result,min,max);
		}
	
		if(root.key< max) {
			getResult(root.right,result,min,max);
		}
	}

}
